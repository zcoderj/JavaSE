Number; i++) {
			this.targetPaths.add(this.targetDir + "/" + this.source.getName() + i);
		}
	}

	/**
	 * 分割文件
	 */
	public void split() throws IOException {
		// 起始位置
		int beginPosition = 0;
		// 实际大小
		int actualSize = 0;
		// 文件剩余总大小
		long length = this.source.length();
		for (int i = 0; i < this.blockNumber; i++) {
			beginPosition = i * blockSize;
			if (i == this.blockNumber - 1) {
				actualSize = (int) length;
			} else {
				actualSize = this.blockSize;
				length -= blockSize;
			}
			splitDetail(i, beginPosition, actualSize);
		}

	}

	private void splitDetail(int i, int beginPosition, int actualSize) throws IOException {

		RandomAccessFile rafRead = new RandomAccessFile(this.source, "r");
		RandomAccessFile rafWrite = new RandomAccessFile(this.targetPaths.get(i), "rw");
		// 指定读取的起始位置
		rafRead.seek(beginPosition);
		// 读取文件中的指定分段
		// 缓冲容器
		byte[] flush = new byte[1024 * 1]